<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis">


	<!-- signup -->
	<insert id="signup_ok" parameterType="com.exam.model1.user.UserTO">
		insert into user
		values( #{id}, #{pwd}, #{name}, #{birth}, #{mail}, #{phone}, #{nick}, now(),
		ifnull( #{profile}, profile ), ifnull( #{greet}, greet ) )
	</insert>

	<select id="nick_lookup" parameterType="com.exam.model1.user.UserTO"
		resultType="Int">
		select count( nick )
		from user
		where nick like #{ nick };
	</select>


	<!-- 회원있는지 여부확인 -->
	<select id="login_lookup" parameterType="com.exam.model1.user.UserTO"
		resultType="Int">
		select count( id )
		from user
		where id like #{ id };
	</select>

	<select id="login_ok" parameterType="com.exam.model1.user.UserTO" resultType="Int">
		select count(*)
		from user
		where id like #{id} and pwd like #{pwd}
	</select>
	
	<select id="login_ok_nick" parameterType="com.exam.model1.user.UserTO" resultType="com.exam.model1.user.UserTO">
		select id, nick, profile
		from user
		where id like #{id} and pwd like #{pwd}
	</select>

	<select id="login_decry" parameterType="com.exam.model1.user.UserTO"
		resultType="com.exam.model1.user.UserTO">
		select pwd
		from user
		where id like #{id}
	</select>

	<!-- 회원있는지 여부확인 -->
	<select id="pwFind_lookup"
		parameterType="com.exam.model1.user.UserTO" resultType="Int">
		select count( id )
		from user
		where id like #{ id };
	</select>

	<!-- 메일 일치 여부 확인 -->
	<select id="pwFind_ok" parameterType="com.exam.model1.user.UserTO"
		resultType="Int">
		select count(*)
		from user
		where id = #{id} and mail = #{mail}
	</select>

	<!-- 전송을 위한 비밀번호 조회 -->
	<select id="pwdFind_update"
		parameterType="com.exam.model1.user.UserTO"
		resultType="com.exam.model1.user.UserTO">
		select pwd
		from user
		where id = #{id} and mail = #{mail}
	</select>



	<!-- ================  랜선여행 하기  ================= -->
	

	<!-- 게시물 갯수 가져오기  - 검색기능이 추가되었을 때 sql문이 바껴야한다. -->
	<select id="lantrip_count" parameterType="com.exam.model1.lantrip.LanTripTO" resultType="int">
		select count(no) 
		from l_board
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		where (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		where (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		where (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		 	<!--location이 null이 아니라면-->
		 	<when test="location != null">
		 		where (location like CONCAT('%',#{location},'%'))
		 	</when>
		</choose>
	</select>
	
	<!--로그인 전 Lantriplist -->
	<select id="lanTripList" resultType="com.exam.model1.lantrip.LanTripTO">
		select no, subject, writer, date_format(wdate, '%Y-%m-%d') wdate, hit, location, video, reply, heart
		from l_board b left outer join user u
		on b.writer = u.nick
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		where (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		where (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		where (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		 	<!--location이 null이 아니라면-->
		 	<when test="location != null">
		 		where (location like CONCAT('%',#{location},'%'))
		 	</when>
		</choose>
		order by b.no desc
		limit #{startRowNum}, #{rowCount}
	</select>
	
	<!-- 로그인 후 lanTrip 리스트 -->
	<select id="lanTrip_list_login" parameterType="com.exam.model1.lantrip.LanTripTO" resultType="com.exam.model1.lantrip.LanTripTO">
		select b.no, b.subject, b.writer, hit, location, video, reply, heart, h.hno, f.fno
		from l_board b left outer join l_heart h
		on #{nick} = h.userid and b.no = h.bno
		left outer join l_favorite f
		on #{nick} = f.userid and b.no = f.bno
		left outer join user u
		on b.writer = u.nick 
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		where (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		where (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		where (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		 	<!--location이 null이 아니라면-->
		 	<when test="location != null">
		 		where (location like CONCAT('%',#{location},'%'))
		 	</when>
		</choose>
		order by b.no desc
		limit #{startRowNum}, #{rowCount}
	</select>

	<!-- lanTrip write_ok -->
	 
	<insert id="lanTrip_write_ok" parameterType="com.exam.model1.lantrip.LanTripTO">
		insert into l_board
		values(0, #{ subject }, #{ content }, #{ writer }, now(), 0, #{ location }, #{ video }, 0, 0 )
	</insert>
	
	<!-- lanTrip view -->
	<select id="lanTrip_view" parameterType="com.exam.model1.lantrip.LanTripTO" resultType="com.exam.model1.lantrip.LanTripTO">
		select no, subject, writer, date_format(wdate, '%Y-%m-%d') wdate, content, hit, location, video, reply, heart
		from l_board
		where no=#{no}
	</select>
	
	<!-- 로그인일 때 lantrip view -->
	<select id="lanTrip_view_login" parameterType="com.exam.model1.lantrip.LanTripTO" 
			resultType="com.exam.model1.lantrip.LanTripTO">
		select s.no, s.subject, s.content, s.writer, s.wdate, s.hit, s.location, s.video, s.reply, s.heart, h.hno, f.fno
		from l_board s left outer join l_heart h
		on #{nick} = h.userid and s.no = h.bno
		left outer join l_favorite f
		on #{nick} = f.userid and s.no = f.bno
		where s.no = #{no}
	</select>
	
	
	<update id="view_hit" parameterType="com.exam.model1.lantrip.LanTripTO">
		update l_board set hit=hit+1
		where no=#{no}
	</update>
	
		<!-- 랜선여행 view reply 수 불러오기 -->
	<update id="lanViewReply" parameterType="com.exam.model1.lantrip.LanTripTO">
		update l_board
		set reply = ( select count(*) 
				from l_reply
				where bno = #{no} )
		where no = #{no}
	</update>

	<!-- 랜선여행 reply list -->
	<select id="lantripReplyList" parameterType="com.exam.model1.lantripReply.LanTripReplyTO"
		resultType="com.exam.model1.lantripReply.LanTripReplyTO">
		select no, bno, writer, content, wdate, grp, grps, grpl, u.profile
		from l_reply r inner join user u
		on r.writer = u.nick
		where bno = #{bno}
		order by grp asc, grps desc, grpl asc
	</select>
	
	<!-- 랜선여행 comment write ok -->
	<insert id="lanTripReplyOk" parameterType="com.exam.model1.lantripReply.LanTripReplyTO">
		insert into l_reply
		values( 0, #{bno}, #{writer}, #{content}, now(), 0, 999, 0 )
	</insert>

	<!-- 가장 최근 no받아오기 -->
	<select id="lan_noSelect" resultType="String">
		select max(no)
		from l_reply
	</select>
	
	<!-- 가장 최근에 추가된 no를 grp로 설정 -->
	<update id="lan_grpUpdate" parameterType="com.exam.model1.lantripReply.LanTripReplyTO">
		update l_reply
		set grp = #{ grp }
		where no = #{ no }
	</update>

	<!-- lanTrip reply 부모 grp, grps, grpl가져오는 sql -->
	<select id="lanParentSelect" parameterType="com.exam.model1.lantripReply.LanTripReplyTO" 
		resultType="com.exam.model1.lantripReply.LanTripReplyTO">
		select grp, grps, grpl
		from l_reply
		where no = #{ no }	
	</select>
	
	<!-- lanTrip reply 부모 grp와 같고 부모 grpl(0)보다 큰 답글들 grps 1씩 증가시키는 sql -->
	<update id="lanUpdateGrps" parameterType="com.exam.model1.lantripReply.LanTripReplyTO">
		update l_reply
		set grps = grps + 1
		where grp = #{ grp } and grps > #{ grpl }
	</update>
	
	<!-- lanTrip reply 답글 추가하는 sql -->
	<insert id="lanRereplyInsertOk" parameterType="com.exam.model1.lantripReply.LanTripReplyTO">
		insert into l_reply
		values (0, #{bno}, #{writer}, #{content}, now(), #{grp}, #{grps}+1, #{grpl}+1 )
	</insert>
	
	<!--  lanTrip reply_deleteOk_parent -->
	<delete id="lanTrip_reply_deleteOk_parent" parameterType="com.exam.model1.lantripReply.LanTripReplyTO">
		delete from l_reply
		where grp = #{ no }
	</delete>
	
	<!--  lanTrip reply_deleteOk_child -->
	<delete id="lanTrip_reply_deleteOk_child" parameterType="com.exam.model1.lantripReply.LanTripReplyTO">
		delete from l_reply
		where no = #{ no }
	</delete>
	
	<!--  lanTrip reply_modifyOk -->
	<update id="lanTrip_reply_modifyOk" parameterType="com.exam.model1.lantripReply.LanTripReplyTO">
		update l_reply
		set content = #{ content } 
		where no = #{ no }
	</update>

	<!-- lanTrip delete_ok -->
	<delete id="lanTrip_delete_ok" parameterType="com.exam.model1.lantrip.LanTripTO">
		delete from l_board
		where no=#{no}
	</delete>
	
	<!-- lanTrip modify -->
	<select id="lanTrip_modify" parameterType="com.exam.model1.lantrip.LanTripTO" resultType="com.exam.model1.lantrip.LanTripTO">
		select no, subject, content, writer, date_format(wdate, '%Y-%m-%d') wdate, hit, location, video
		from l_board
		where no=#{no}
	</select>
	
	<!-- lanTrip modify_ok -->
	<update id="lanTrip_modify_ok" parameterType="com.exam.model1.lantrip.LanTripTO">
		update l_board set subject = #{ subject }, content = #{ content }, video = #{ video }, location = #{ location }
		where no=#{no}
	</update>
	
	<!--lanTrip heart -->
	<!-- 좋아요 추가 -->
	<insert id="lanTrip_heart_save" parameterType="com.exam.model1.lantripHeart.LantripHeartTO">
		insert into l_heart
		values(0, #{bno}, #{userid})
	</insert>
	<update id="lanTrip_heart_up" parameterType="com.exam.model1.lantrip.LanTripTO">
		update l_board set heart=heart+1 
		where no=#{no}
	</update>
	
	
	<!-- 좋아요 삭제 -->
	<delete id="lanTrip_heart_remove" parameterType="com.exam.model1.lantripHeart.LantripHeartTO">
		delete from l_heart
		where bno=#{bno} and userid=#{userid}
	</delete>
	<update id="lanTrip_heart_down" parameterType="com.exam.model1.lantrip.LanTripTO">
		update l_board set heart=heart-1 
		where no=#{no}
	</update>
	
	<!-- 좋아요 개수 가져오는 sql -->
	<select id="lanTripHeartCount" parameterType="com.exam.model1.lantrip.LanTripTO" resultType="com.exam.model1.lantrip.LanTripTO">
		select heart
		from l_board
		where no = #{ no }
	</select>
	
	<!-- 랜선여행 BEST5 리스트 -->
	<select id="best_lantrip_list" resultType="com.exam.model1.lantrip.LanTripTO">
		select no, writer, hit, location, video, reply, heart
		from l_board
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		where (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		where (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		where (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		 	<!--location이 null이 아니라면-->
		 	<when test="location != null">
		 		where (location like CONCAT('%',#{location},'%'))
		 	</when>
		</choose>
		order by heart desc
		limit 5
	</select>
	
	<select id="favoriteList" parameterType="com.exam.model1.lantrip.LanTripTO" resultType="com.exam.model1.lantrip.LanTripTO">
		select b.no, b.subject, b.writer, date_format(b.wdate, '%Y-%m-%d') wdate, b.hit, b.location, b.video, b.reply, b.heart, h.hno, u.profile
		from l_board b inner join l_heart h
		on b.no = h.bno
		inner join user u
		on b.writer = u.nick
		where h.userid like #{ nick }
		order by b.no desc
		limit #{startRowNum}, #{endRowNum}
	</select>
	
	<!-- ================  랜선여행 신청하기  =================  -->
	<!-- LanTripApplyList -->
	<select id="LanTripApplyList"
		resultType="com.exam.model1.lantripApply.LanTripApplyTO"> <!-- 파라메터가 없으므로 parameter Type 필요 없음 -->
		select no, location, subject, writer, date_format(wdate, '%Y-%m-%d') wdate, hit, reply
		from la_board
	</select>

	<!-- LanTripApplyWriteOk -->
	<insert id="lanTrip_apply_write_ok" parameterType="com.exam.model1.lantripApply.LanTripApplyTO">
		insert into la_board
		values(0, #{ subject }, #{ content }, #{ writer }, now(), 0, #{ location }, #{ picture }, 0 )
	</insert>

	<!-- LanTripApplyView -->
	<select id="lanTrip_apply_view" parameterType="com.exam.model1.lantripApply.LanTripApplyTO" 
	resultType="com.exam.model1.lantripApply.LanTripApplyTO">
		select no, subject, content, writer, date_format(wdate, '%Y-%m-%d') wdate, hit, location, picture, reply
		from la_board
		where no = #{no}
	</select>
	<!-- 랜선여행신청하기 조회수 -->
	<update id="lanTrip_apply_view_hit" parameterType="com.exam.model1.lantripApply.LanTripApplyTO">
		update la_board
		set hit=hit+1
		where no = #{no}
	</update>
	<!-- LanTripApplyDeleteOk -->
	<delete id="lanTrip_apply_delete_ok" parameterType="com.exam.model1.lantripApply.LanTripApplyTO">
		delete from la_board
		where no = #{no}
	</delete>
	
	<!-- LanTripApplyModify -->
	<select id="lanTrip_apply_modify" parameterType="com.exam.model1.lantripApply.LanTripApplyTO" 
	resultType="com.exam.model1.lantripApply.LanTripApplyTO">
		select no, subject, content, writer, date_format(wdate, '%Y-%m-%d') wdate, hit, location, picture, reply
		from la_board
		where no = #{no}
	</select>
	
	<!-- LanTripApplyModifyOk -->
	<update id="lanTrip_apply_modify_ok" parameterType="com.exam.model1.lantripApply.LanTripApplyTO">
		update la_board
		set subject = #{subject}, content = #{content}, location = #{location}, picture = #{picture}
		where no = #{no}
	</update>
	
	<!-- 댓글 테이블의 마지막 auto_increment 값을 가져옴 -->
	<select id="la_reply_max_no" resultType="int">
		select ifnull(max(no),0) from la_reply
	</select>
	
	<!-- 댓글 쓰기 -->
	<insert id="la_reply_write" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO">
		insert into la_reply
		values(0, #{bno}, #{grp}, 0, 0, #{writer}, #{content}, now())
	</insert>
	
	<!-- 모댓글일경우 no, grp 일치하게 함 -->
	<update id="la_reply_check" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO">
		update la_reply set grp=#{grp}
		where no != grp
	</update>
	
	<!-- 모댓글이 삭제된 댓글일때 그에 딸린 답글들이 모두삭제되면 테이블에서 완전히 삭제한다 -->
	<delete id="la_reply_delete_after_rereply_delete" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO">
		delete from la_reply
		where content="" and grp=#{grp}
	</delete>
	
	<!-- 답글 쓰기 -->
	<insert id="la_rereply_write" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO">
		insert into la_reply
		values(0, #{bno}, #{grp}, 0, #{grpl}, #{writer}, #{content}, now())
	</insert>
	
	<!-- p_board에 댓글수 증가 -->
	<update id="la_reply_up" parameterType="com.exam.model1.lantripApply.LanTripApplyTO">
		update la_board set reply=reply+1 
		where no=#{no}
	</update>
	
	<!-- 댓글 리스트 가져오기 -->
	<select id="la_replyList" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO" resultType="com.exam.model1.lantripApplyReply.LaReplyTO">
		select r.no, r.bno, r.grp, r.grpl, r.writer, r.content, date_format(wdate,'%Y-%m-%d') wdate, datediff(now(), wdate) wgap , u.profile
		from la_reply r left outer join user u
		on r.writer = u.nick
		where r.bno = #{bno}
		order by grp asc, grps desc
	</select>
	
	
	<!-- 댓글 추가/삭제시 댓글 갯수 가져오기 -->
	<select id="la_reply_count" parameterType="com.exam.model1.lantripApply.LanTripApplyTO" resultType="com.exam.model1.lantripApply.LanTripApplyTO">
		select reply 
		from la_board
		where no=#{no}
	</select>
	
	<!-- 모댓글의 답글수를 카운트 -->
	<select id="la_count_rereply" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO" resultType="int">
		select count(no)
		from la_reply
		where no != #{no} and grp = #{no}
	</select>
	
	<!-- 답글수를 카운트 -->
	<select id="la_count_rereply_fromrereply" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO" resultType="int">
		select count(no)
		from la_reply
		where no != #{grp} and grp = #{grp}
	</select>
	
	<!-- 모댓글 삭제 - 답글 없음 -->
	<delete id="la_reply_delete" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO">
		delete from la_reply
		where no=#{no}
	</delete>
	
	<!-- 모댓글 삭제 - 답글 있음 -->
	<update id="la_reply_not_delete" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO">
		update la_reply set content=""
		where no=#{no}
	</update>
	
	<!-- p_board에 댓글수 감소 -->
	<update id="la_reply_down" parameterType="com.exam.model1.lantripApplyReply.LaReplyTO">
		update la_board set reply=reply-1
		where no=#{no}
	</update>



	<!--  =================  사진자랑하기   =================  -->
	<!-- 사진자랑 글쓰기  -->
	<insert id="picture_write_ok" parameterType="com.exam.model1.picture.PictureTO">
		insert into p_board
		values(0, #{ subject }, #{ content }, #{ writer }, now(), 0, #{ location }, #{ media }, 0 ,0)
	</insert>
	
	<!-- 게시물 갯수 가져오기  - 검색기능이 추가되었을 때 sql문이 바껴야한다. -->
	<select id="picture_count" parameterType="com.exam.model1.picture.PictureTO" resultType="int">
		select count(no) 
		from p_board
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		where (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		where (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		where (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		 	<!--location이 null이 아니라면-->
		 	<when test="location != null">
		 		where (location like CONCAT('%',#{location},'%'))
		 	</when>
		</choose>
	</select>
	
	<!-- 로그인 전 사진자랑 리스트 -->
	<select id="picture_list" resultType="com.exam.model1.picture.PictureTO">
		select b.no, subject, content, writer, date_format(wdate,'%Y-%m-%d') wdate, hit, location, media, reply, heart, u.profile
		from p_board b left outer join user u
		on b.writer = u.nick
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		where (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		where (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		where (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		 	<!--location이 null이 아니라면-->
		 	<when test="location != null">
		 		where (location like CONCAT('%',#{location},'%'))
		 	</when>
		</choose>
		order by b.no desc
		limit #{startRowNum}, #{rowCount}
	</select>

	<!-- 로그인 후 사진자랑 리스트 -->
	<select id="picture_list_login" parameterType="com.exam.model1.picture.PictureTO" resultType="com.exam.model1.picture.PictureTO">
		select b.no, subject, content, writer, date_format(wdate,'%Y-%m-%d') wdate, hit, location, media, reply, heart, h.hno, f.fno, u.profile
		from p_board b left outer join p_heart h
		on #{nick} = h.userid and b.no = h.bno
		left outer join p_favorite f
		on #{nick} = f.userid and b.no = f.bno
		left outer join user u
		on b.writer = u.nick 
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		where (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		where (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		where (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		 	<!--location이 null이 아니라면-->
		 	<when test="location != null">
		 		where (location like CONCAT('%',#{location},'%'))
		 	</when>
		</choose>
		order by b.no desc
		limit #{startRowNum}, #{rowCount}
	</select>
	
	<!-- 사진자랑 BEST5 리스트 -->
	<select id="best_picture_list" parameterType="com.exam.model1.picture.PictureTO" resultType="com.exam.model1.picture.PictureTO">
		select no, writer, hit, location, media, reply, heart
		from p_board
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		where (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		where (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		where (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		 	<!--location이 null이 아니라면-->
		 	<when test="location != null">
		 		where (location like CONCAT('%',#{location},'%'))
		 	</when>
		</choose>
		order by heart desc
		limit 5
	</select>
	
	<!-- view modal -->
	<select id="picture_view" parameterType="com.exam.model1.picture.PictureTO" resultType="com.exam.model1.picture.PictureTO">
		select b.no, subject, content, writer, wdate, hit, location, media, reply, heart, h.hno, f.fno, u.profile
		from p_board b left outer join p_heart h
		on #{nick} = h.userid and b.no = h.bno
		left outer join p_favorite f
		on #{nick} = f.userid and b.no = f.bno
		left outer join user u
		on b.writer = u.nick
		where no=#{no}
	</select>
	<update id="picture_view_hit" parameterType="com.exam.model1.picture.PictureTO">
		update p_board set hit=hit+1 
		where no=#{no}
	</update>

	<!-- 좋아요 추가 -->
	<insert id="picture_heart_save" parameterType="com.exam.model1.pictureHeart.PictureHeartTO">
		insert into p_heart
		values(0, #{bno}, #{userid})
	</insert>
	<update id="picture_heart_up" parameterType="com.exam.model1.picture.PictureTO">
		update p_board set heart=heart+1 
		where no=#{no}
	</update>
	
	<!-- 좋아요 삭제 -->
	<delete id="picture_heart_remove" parameterType="com.exam.model1.pictureHeart.PictureHeartTO">
		delete from p_heart
		where bno=#{bno} and userid=#{userid}
	</delete>
	<update id="picture_heart_down" parameterType="com.exam.model1.picture.PictureTO">
		update p_board set heart=heart-1 
		where no=#{no}
	</update>
	
	<!-- 좋아요 추가/삭제시 좋아요 갯수 가져오기 -->
	<select id="picture_heart_count" parameterType="com.exam.model1.picture.PictureTO" resultType="com.exam.model1.picture.PictureTO">
		select heart 
		from p_board
		where no=#{no}
	</select>
	
	<!-- 댓글 테이블의 마지막 auto_increment 값을 가져옴 -->
	<select id="p_reply_max_no" resultType="int">
		select ifnull(max(no),0) from p_reply
	</select>
	
	<!-- 댓글 쓰기 -->
	<insert id="picture_reply_write" parameterType="com.exam.model1.pictureReply.ReplyTO">
		insert into p_reply
		values(0, #{bno}, #{grp}, 0, 0, #{writer}, #{content}, now())
	</insert>
	
	<!-- 모댓글일경우 no, grp 일치하게 함 -->
	<update id="picture_reply_check" parameterType="com.exam.model1.pictureReply.ReplyTO">
		update p_reply set grp=#{grp}
		where no != grp
	</update>
	
	<!-- 모댓글이 삭제된 댓글일때 그에 딸린 답글들이 모두삭제되면 테이블에서 완전히 삭제한다 -->
	<delete id="picture_reply_delete_after_rereply_delete" parameterType="com.exam.model1.pictureReply.ReplyTO">
		delete from p_reply
		where content="" and grp=#{grp}
	</delete>
	
	<!-- 답글 쓰기 -->
	<insert id="picture_rereply_write" parameterType="com.exam.model1.pictureReply.ReplyTO">
		insert into p_reply
		values(0, #{bno}, #{grp}, 0, #{grpl}, #{writer}, #{content}, now())
	</insert>
	
	<!-- p_board에 댓글수 증가 -->
	<update id="picture_reply_up" parameterType="com.exam.model1.picture.PictureTO">
		update p_board set reply=reply+1 
		where no=#{no}
	</update>
	
	<!-- 댓글 리스트 가져오기 -->
	<select id="picutre_replyList" parameterType="com.exam.model1.pictureReply.ReplyTO" resultType="com.exam.model1.pictureReply.ReplyTO">
		select r.no, r.bno, r.grp, r.grpl, r.writer, r.content, date_format(wdate,'%Y-%m-%d') wdate, datediff(now(), wdate) wgap , u.profile
		from p_reply r left outer join user u
		on r.writer = u.nick
		where r.bno = #{bno}
		order by grp asc, grps desc
	</select>
	
	
	<!-- 댓글 추가/삭제시 댓글 갯수 가져오기 -->
	<select id="picture_reply_count" parameterType="com.exam.model1.picture.PictureTO" resultType="com.exam.model1.picture.PictureTO">
		select reply 
		from p_board
		where no=#{no}
	</select>
	
	<!-- 모댓글의 답글수를 카운트 -->
	<select id="picture_count_rereply" parameterType="com.exam.model1.pictureReply.ReplyTO" resultType="int">
		select count(no)
		from p_reply
		where no != #{no} and grp = #{no}
	</select>
	
	<!-- 답글수를 카운트 -->
	<select id="picture_count_rereply_fromrereply" parameterType="com.exam.model1.pictureReply.ReplyTO" resultType="int">
		select count(no)
		from p_reply
		where no != #{grp} and grp = #{grp}
	</select>
	
	<!-- 모댓글 삭제 - 답글 없음 -->
	<delete id="picture_reply_delete" parameterType="com.exam.model1.pictureReply.ReplyTO">
		delete from p_reply
		where no=#{no}
	</delete>
	
	<!-- 모댓글 삭제 - 답글 있음 -->
	<update id="picture_reply_not_delete" parameterType="com.exam.model1.pictureReply.ReplyTO">
		update p_reply set content=""
		where no=#{no}
	</update>
	
	<!-- p_board에 댓글수 감소 -->
	<update id="picture_reply_down" parameterType="com.exam.model1.picture.PictureTO">
		update p_board set reply=reply-1
		where no=#{no}
	</update>
	
	<!-- modify -->
	<select id="picture_modify" parameterType="com.exam.model1.picture.PictureTO" resultType="com.exam.model1.picture.PictureTO">
		select no, subject, content, writer, wdate, location, media 
		from p_board
		where no=#{no} 
	</select>
	
	<!-- modify_ok -->
	<update id="picture_modify_ok" parameterType="com.exam.model1.picture.PictureTO">
		update p_board
		set subject=#{subject}, content=#{content}, media=#{media}, location=#{location}
		where no=#{no}
	</update>
	
	<!-- delete_ok -->
	<delete id="picture_delete_ok"  parameterType="com.exam.model1.picture.PictureTO">
		delete from p_board 
		where no=#{no}
	</delete>

	
	

	<!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ여행지정보 관련ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	<!--ㅡㅡㅡㅡㅡㅡ 쇼핑관련 ㅡㅡㅡㅡㅡㅡ -->
	<!-- 쇼핑 write_ok -->
	<insert id="shop_write_ok" parameterType="com.exam.model1.shopping.ShoppingTO">
		insert into s_board
		values(0, #{ subject }, #{ content }, #{ writer }, now(), 0, #{ location }, #{ picture }, 0, 0 )
	</insert>

	<!--로그인 전 쇼핑 list -->
	<select id="shopList" parameterType="com.exam.model1.shopping.ShoppingTO"
		resultType="com.exam.model1.shopping.ShoppingTO">
		select b.no, subject, content, writer, date_format(wdate,'%Y-%m-%d') wdate, hit, location, ifnull(picture, '') picture, reply, heart, u.profile
		from s_board b left outer join user u
		on b.writer = u.nick
		where location like #{ location }
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		and (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		and (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		and (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		</choose>
		order by b.no desc
		limit #{startRowNum}, #{rowCount}
	</select>

	<!-- 로그인 후 쇼핑 list -->
	<select id="shopListLogin" parameterType="com.exam.model1.shopping.ShoppingTO" resultType="com.exam.model1.shopping.ShoppingTO">
		select b.no, subject, content, writer, date_format(wdate,'%Y-%m-%d') wdate, hit, location, ifnull(picture, '') picture, reply, heart, h.hno, f.fno, u.profile
		from s_board b left outer join s_heart h
		on #{nick} = h.userid and b.no = h.bno
		left outer join s_favorite f
		on #{nick} = f.userid and b.no = f.bno
		left outer join user u
		on b.writer = u.nick 
		where location like #{ location }
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		and (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		and (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		and (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		</choose>
		order by b.no desc
		limit #{startRowNum}, #{rowCount}
	</select>
	
	<!-- 게시물 갯수 가져오기  - 검색기능이 추가되었을 때 sql문이 바껴야한다. -->
	<select id="shop_count" parameterType="com.exam.model1.shopping.ShoppingTO" resultType="int">
		select count(no) 
		from s_board
		where location like #{ location }
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		and (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		and (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		and (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		</choose>
	</select>
	

	<!-- 쇼핑 좋아요 추가 -->
	<insert id="shop_heart_save" parameterType="com.exam.model1.shopHeart.ShopHeartTO">
		insert into s_heart
		values(0, #{bno}, #{userid})
	</insert>
	<update id="shop_heart_up" parameterType="com.exam.model1.shopping.ShoppingTO">
		update s_board set heart=heart+1 
		where no=#{no}
	</update>
	
	
	<!-- 쇼핑 좋아요 삭제 -->
	<delete id="shop_heart_remove" parameterType="com.exam.model1.shopHeart.ShopHeartTO">
		delete from s_heart
		where bno=#{bno} and userid=#{userid}
	</delete>
	<update id="shop_heart_down" parameterType="com.exam.model1.shopping.ShoppingTO">
		update s_board set heart=heart-1 
		where no=#{no}
	</update>

	<!-- 좋아요 개수 가져오는 sql -->
	<select id="shopHeartCount" parameterType="com.exam.model1.shopping.ShoppingTO" resultType="com.exam.model1.shopping.ShoppingTO">
		select heart
		from s_board
		where no = #{ no }
	</select>

	<!-- 로그인아닐 때 쇼핑 view -->
	<select id="shopView" parameterType="com.exam.model1.shopping.ShoppingTO" 
			resultType="com.exam.model1.shopping.ShoppingTO">
		select no, subject, content, writer, wdate, hit, location, picture, reply, heart
		from s_board
		where no = #{no}
	</select>
	
	<!-- 로그인일 때 쇼핑 view -->
	<select id="shopViewLogin" parameterType="com.exam.model1.shopping.ShoppingTO" 
			resultType="com.exam.model1.shopping.ShoppingTO">
		select s.no, s.subject, s.content, s.writer, s.wdate, s.hit, s.location, s.picture, s.reply, s.heart, h.hno, f.fno
		from s_board s left outer join s_heart h
		on #{nick} = h.userid and s.no = h.bno
		left outer join s_favorite f
		on #{nick} = f.userid and s.no = f.bno
		where s.no = #{no}
	</select>
	
	<!-- 쇼핑 view hit 올리기 -->
	<update id="shopViewHit" parameterType="com.exam.model1.shopping.ShoppingTO">
		update s_board
		set hit = hit + 1 
		where no = #{no}
	</update>
	
	<!-- 쇼핑 view reply 수 불러오기 -->
	<update id="shopViewReply" parameterType="com.exam.model1.shopping.ShoppingTO">
		update s_board
		set reply = ( select count(*) 
				from s_reply
				where bno = #{no} )
		where no = #{no}
	</update>

	<!-- 쇼핑 comment list -->
	<select id="shopListComment" parameterType="com.exam.model1.shoppingComment.ShoppingCommentTO"
		resultType="com.exam.model1.shoppingComment.ShoppingCommentTO">
		select no, bno, writer, content, wdate, grp, grps, grpl
		from s_reply
		where bno = #{bno}
		order by grp asc, grps desc
	</select>
	
	<!-- 쇼핑 comment write ok -->
	<insert id="shopViewCommentOk" parameterType="com.exam.model1.shoppingComment.ShoppingCommentTO">
		insert into s_reply
		values( 0, #{bno}, #{writer}, #{content}, now(), 0, 999, 0 )
	</insert>
	
	
	<!-- 가장 최근 no받아오기 -->
	<select id="shop_noSelect" resultType="String">
		select max(no)
		from s_reply
	</select>
	
	<!-- 가장 최근에 추가된 no를 grp로 설정 -->
	<update id="shop_grpUpdate" parameterType="com.exam.model1.shoppingComment.ShoppingCommentTO">
		update s_reply
		set grp = #{ grp }
		where no = #{ no }
	</update>
	
	<!-- 쇼핑 reply 부모 grp, grps, grpl가져오는 sql -->
	<select id="shopParentSelect" parameterType="com.exam.model1.shoppingComment.ShoppingCommentTO" 
		resultType="com.exam.model1.shoppingComment.ShoppingCommentTO">
		select grp, grps, grpl
		from s_reply
		where no = #{ no }	
	</select>
	
	<!-- 쇼핑 reply 부모 grp와 같고 부모 grpl(0)보다 큰 답글들 grps 1씩 증가시키는 sql -->
	<update id="shopUpdateGrps" parameterType="com.exam.model1.shoppingComment.ShoppingCommentTO">
		update s_reply
		set grps = grps + 1
		where grp = #{ grp } and grps > #{ grpl }
	</update>
	
	<!-- 쇼핑 reply 답글 추가하는 sql -->
	<insert id="shopRereplyInsertOk" parameterType="com.exam.model1.shoppingComment.ShoppingCommentTO">
		insert into s_reply
		values (0, #{bno}, #{writer}, #{content}, now(), #{grp}, #{grps}+1, #{grpl}+1 )
	</insert>
	
	<!--  쇼핑 reply_deleteOk_parent -->
	<delete id="shopping_reply_deleteOk_parent" parameterType="com.exam.model1.shoppingComment.ShoppingCommentTO">
		delete from s_reply
		where grp = #{ no }
	</delete>
	
	<!--  쇼핑 reply_deleteOk_child -->
	<delete id="shopping_reply_deleteOk_child" parameterType="com.exam.model1.shoppingComment.ShoppingCommentTO">
		delete from s_reply
		where no = #{ no }
	</delete>
	
	<!--  쇼핑 reply_modifyOk -->
	<update id="shopping_reply_modifyOk" parameterType="com.exam.model1.shoppingComment.ShoppingCommentTO">
		update s_reply
		set content = #{ content } 
		where no = #{ no }
	</update>
	
	<!-- 쇼핑 delete_ok -->
	<delete id="shopDeleteOk" parameterType="com.exam.model1.shopping.ShoppingTO">
		delete from s_board
		where writer like #{writer} and no = #{no}
	</delete>
	
	<!-- 쇼핑 modify_ok -->
	<delete id="shopModifyOk" parameterType="com.exam.model1.shopping.ShoppingTO">
		update s_board
		set subject=#{subject}, content=#{content}, picture=#{picture}
		where no=#{no} and writer like #{writer}
	</delete>

	<!--ㅡㅡㅡㅡㅡㅡ 숙소관련 ㅡㅡㅡㅡㅡㅡ -->
	<!-- 숙소 write_ok -->
	<insert id="accom_write_ok"
		parameterType="com.exam.model1.accom.AccomTO">
		insert into a_board
		values(0, #{ subject }, #{ content }, #{ writer }, now(), 0, #{ location }, #{ picture }, 0, 0 )
	</insert>

	<!--로그인 전 숙소 list -->
	<select id="accomList" parameterType="com.exam.model1.accom.AccomTO"
		resultType="com.exam.model1.accom.AccomTO">
		select b.no, subject, content, writer, date_format(wdate,'%Y-%m-%d') wdate, hit, location, ifnull(picture, '') picture, reply, heart, u.profile
		from a_board b left outer join user u
		on b.writer = u.nick
		where location like #{ location }
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		and (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		and (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		and (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		</choose>
		order by b.no desc
		limit #{startRowNum}, #{rowCount}
	</select>

	<!-- 로그인 후 숙소 list -->
	<select id="accomListLogin" parameterType="com.exam.model1.accom.AccomTO" resultType="com.exam.model1.accom.AccomTO">
		select b.no, subject, content, writer, date_format(wdate,'%Y-%m-%d') wdate, hit, location, ifnull(picture, '') picture, reply, heart, h.hno, f.fno, u.profile
		from a_board b left outer join a_heart h
		on #{nick} = h.userid and b.no = h.bno
		left outer join a_favorite f
		on #{nick} = f.userid and b.no = f.bno
		left outer join user u
		on b.writer = u.nick 
		where location like #{ location }
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		and (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		and (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		and (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		</choose>
		order by b.no desc
		limit #{startRowNum}, #{rowCount}
	</select>
	
	<!-- 게시물 갯수 가져오기  - 검색기능이 추가되었을 때 sql문이 바껴야한다. -->
	<select id="accom_count" parameterType="com.exam.model1.accom.AccomTO" resultType="int">
		select count(no) 
		from a_board
		where location like #{ location }
		<choose>
			<!-- if문과 비슷한 구조임, subject가 둘 null이 아니라면, 제목 검색 -->
		 	<when test="subject != null">
		 		and (subject like CONCAT('%',#{subject},'%'))
		 	</when>
			<!--content가 null이 아니라면-->
		 	<when test="content != null">
		 		and (content like CONCAT('%',#{content},'%'))
		 	</when>
			<!--writer가 null이 아니라면-->
		 	<when test="writer != null">
		 		and (writer like CONCAT('%',#{writer},'%'))
		 	</when>
		</choose>
	</select>

	<!-- 숙소 좋아요 추가 -->
	<insert id="accom_heart_save" parameterType="com.exam.model1.accomHeart.AccomHeartTO">
		insert into a_heart
		values(0, #{bno}, #{userid})
	</insert>
	<update id="accom_heart_up" parameterType="com.exam.model1.accom.AccomTO">
		update a_board set heart=heart+1 
		where no=#{no}
	</update>
	
	<!-- 슥소 좋아요 삭제 -->
	<delete id="accom_heart_remove" parameterType="com.exam.model1.accomHeart.AccomHeartTO">
		delete from a_heart
		where bno=#{bno} and userid=#{userid}
	</delete>
	<update id="accom_heart_down" parameterType="com.exam.model1.accom.AccomTO">
		update a_board set heart=heart-1 
		where no=#{no}
	</update>
	
	<!-- 좋아요 개수 가져오는 sql -->
	<select id="accomHeartCount" parameterType="com.exam.model1.accom.AccomTO" resultType="com.exam.model1.accom.AccomTO">
		select heart
		from a_board
		where no = #{ no }
	</select>

	<!-- 로그인아닐 때 숙소 view -->
	<select id="accomView" parameterType="com.exam.model1.accom.AccomTO" 
			resultType="com.exam.model1.accom.AccomTO">
		select no, subject, content, writer, wdate, hit, location, picture, reply, heart
		from a_board
		where no = #{no}
	</select>
	
	<!-- 로그인일 숙소 view -->
	<select id="accomViewLogin" parameterType="com.exam.model1.accom.AccomTO" 
			resultType="com.exam.model1.accom.AccomTO">
		select a.no, a.subject, a.content, a.writer, a.wdate, a.hit, a.location, a.picture, a.reply, a.heart, h.hno, f.fno
		from a_board a left outer join a_heart h
		on #{nick} = h.userid and a.no = h.bno
		left outer join a_favorite f
		on #{nick} = f.userid and a.no = f.bno
		where a.no = #{no}
	</select>
	
	<!-- 숙소 view hit 올리기 -->
	<update id="accomViewHit" parameterType="com.exam.model1.accom.AccomTO">
		update a_board
		set hit = hit + 1 
		where no = #{no}
	</update>
	
	<!-- 숙소 view reply 수 불러오기 -->
	<update id="accomViewReply" parameterType="com.exam.model1.accom.AccomTO">
		update a_board
		set reply = ( select count(*) 
				from a_reply
				where bno = #{no} )
		where no = #{no}
	</update>
	
	<!-- 숙소 comment list -->
	<select id="accomListComment" parameterType="com.exam.model1.accomComment.AccomCommentTO"
		resultType="com.exam.model1.accomComment.AccomCommentTO">
		select no, bno, writer, content, wdate, grp, grps, grpl
		from a_reply
		where bno = #{bno}
		order by grp asc, grps desc
	</select>
	
	<!-- 숙소 comment write ok -->
	<insert id="accomViewCommentOk" parameterType="com.exam.model1.accomComment.AccomCommentTO">
		insert into a_reply
		values( 0, #{bno}, #{writer}, #{content}, now(), 0, 999, 0 )
	</insert>
	
	<!-- 가장 최근 no받아오기 -->
	<select id="accom_noSelect" resultType="String">
		select max(no)
		from a_reply
	</select>
	
	<!-- 가장 최근에 추가된 no를 grp로 설정 -->
	<update id="accom_grpUpdate" parameterType="com.exam.model1.accomComment.AccomCommentTO">
		update a_reply
		set grp = #{ grp }
		where no = #{ no }
	</update>
	
	<!-- 숙소 reply 부모 grp, grps, grpl가져오는 sql -->
	<select id="accomParentSelect" parameterType="com.exam.model1.accomComment.AccomCommentTO" 
		resultType="com.exam.model1.accomComment.AccomCommentTO">
		select grp, grps, grpl
		from a_reply
		where no = #{ no }	
	</select>
	
	<!-- 숙소 reply 부모 grp와 같고 grps보다 큰 답글들 grps 1씩 증가시키는 sql -->
	<update id="accomUpdateGrps" parameterType="com.exam.model1.accomComment.AccomCommentTO">
		update a_reply
		set grps = grps + 1
		where grp = #{ grp } and grps > #{ grpl }
	</update>
	
	<!-- 숙소 reply 답글 추가하는 sql -->
	<insert id="accomRereplyInsertOk" parameterType="com.exam.model1.accomComment.AccomCommentTO">
		insert into a_reply
		values (0, #{bno}, #{writer}, #{content}, now(), #{grp}, #{grps}+1, #{grpl}+1 )
	</insert>
	
	<!--  숙소 reply_deleteOk_parent -->
	<delete id="accom_reply_deleteOk_parent" parameterType="com.exam.model1.accomComment.AccomCommentTO">
		delete from a_reply
		where grp = #{ no }
	</delete>
	
	<!--  숙소 reply_deleteOk_child -->
	<delete id="accom_reply_deleteOk_child" parameterType="com.exam.model1.accomComment.AccomCommentTO">
		delete from a_reply
		where no = #{ no }
	</delete>
	
	<!--  숙소 reply_modifyOk -->
	<update id="accom_reply_modifyOk" parameterType="com.exam.model1.accomComment.AccomCommentTO">
		update a_reply
		set content = #{ content } 
		where no = #{ no }
	</update>
	
	<!-- 숙소 delete_ok -->
	<delete id="accomDeleteOk" parameterType="com.exam.model1.accom.AccomTO">
		delete from a_board
		where writer like #{writer} and no = #{no}
	</delete>
	
	<!-- 숙소 modify_ok -->
	<delete id="accomModifyOk" parameterType="com.exam.model1.accom.AccomTO">
		update a_board
		set subject=#{subject}, content=#{content}, picture=#{picture}
		where no=#{no} and writer like #{writer}
	</delete>

	<!-- ================  동행구해요  =================  -->
	<!-- with_list -->
	<select id="withList"
		resultType="com.exam.model1.with.withTO"> <!-- 파라메터가 없으므로 parameter Type 필요 없음 -->
		select no, location, subject, writer, date_format(wdate, '%Y-%m-%d') wdate, hit, reply
		from w_board
	</select>

	<!-- withWriteOk -->
	<insert id="with_write_ok" parameterType="com.exam.model1.with.withTO">
		insert into w_board
		values(0, #{ subject }, #{ content }, #{ writer }, now(), 0, #{ location }, #{ picture }, 0 )
	</insert>

	<!-- withView -->
	<select id="with_view" parameterType="com.exam.model1.with.withTO" 
	resultType="com.exam.model1.with.withTO">
		select no, subject, content, writer, date_format(wdate, '%Y-%m-%d') wdate, hit, location, picture, reply
		from w_board
		where no = #{no}
	</select>
	<!-- 랜선여행신청하기 조회수 -->
	<update id="with_view_hit" parameterType="com.exam.model1.with.withTO">
		update w_board
		set hit=hit+1
		where no = #{no}
	</update>
	<!-- LanTripApplyDeleteOk -->
	<delete id="with_delete_ok" parameterType="com.exam.model1.with.withTO">
		delete from w_board
		where no = #{no}
	</delete>
	
	<!-- LanTripApplyModify -->
	<select id="with_modify" parameterType="com.exam.model1.with.withTO" 
	resultType="com.exam.model1.with.withTO">
		select no, subject, content, writer, date_format(wdate, '%Y-%m-%d') wdate, hit, location, picture, reply
		from w_board
		where no = #{no}
	</select>
	
	<!-- LanTripApplyModifyOk -->
	<update id="with_modify_ok" parameterType="com.exam.model1.with.withTO">
		update w_board
		set subject = #{subject}, content = #{content}, location = #{location}, picture = #{picture}
		where no = #{no}
	</update>
	
	
	
	<!-- ========================= 메세지 ======================= -->
	
	<!-- 메세지 리스트 가져오기 -->
	<select id="message_list" parameterType="com.exam.model1.message.MessageTO" resultType="com.exam.model1.message.MessageTO">
		select no, room, send_nick, recv_nick, date_format(send_time, '%Y-%m-%d %H:%i') send_time, read_time, content, read_chk
		from message
		where no in (select max(no) from message group by room) and (send_nick = #{nick} or recv_nick=#{nick})
		order by no desc;
	</select>
	
	<!-- 메세지 list에서 상대방 profile 가져오기 -->
	<select id="get_other_profile" parameterType="com.exam.model1.message.MessageTO" resultType="String">
		select profile from user
		<choose>
			<when test="send_nick == nick">
				where nick = #{recv_nick}
			</when>
			<otherwise>
				where nick = #{send_nick}
			</otherwise>
		</choose>
	</select>
	
	<!-- 안읽은 메세지 갯수 가져오기 -->
	<select id="count_unread" parameterType="com.exam.model1.message.MessageTO" resultType="Int">
		select count(no) from message 
		where recv_nick=#{nick} and read_chk=0 and room=#{room}
	</select>
	
	<!-- 메세지 내용 가져오기 -->
	<select id="room_content_list" parameterType="com.exam.model1.message.MessageTO" resultType="com.exam.model1.message.MessageTO">
		select m.no, m.room, m.send_nick, m.recv_nick, date_format(m.send_time, '%Y-%m-%d %H:%i') send_time, m.read_time, m.content, m.read_chk, u.profile
		from message m left outer join user u
		on m.send_nick = u.nick
		where room=#{room}
	</select>
	
	<!-- 메세지 읽음 처리 -->
	<update id="message_read_chk" parameterType="com.exam.model1.message.MessageTO">
		update message set read_chk=1
		where room=#{room} and read_chk=0 and recv_nick=#{nick}
	</update>
	
	<!-- 메세지리스트에서 메세지 보내기 -->
	<insert id="messageSendInlist" parameterType="com.exam.model1.message.MessageTO">
		insert into message values(0, #{room}, #{send_nick}, #{recv_nick}, now(), now(), #{content}, 0);
	</insert>
	

</mapper>

